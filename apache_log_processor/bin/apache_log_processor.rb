#!/usr/bin/env ruby
require 'optparse'
require 'apache_log_processor'



class ApacheLogProcessorProgram
  def initialize
    @alp = ApacheLogProcessor.new ""
  end

  def parse_options
    #define the option parser
    option_parser = OptionParser.new do |opts|
      opts.banner = "Usage: apache_log_processor.rb [options] log_file_to_process"

      opts.on("-n", "--num [number]", "Number of threads to use when searching " +
              "for domain names.  Default is #{ApacheLogProcessor::DEFAULT_NUM_THREADS}") do |n|
        @alp.num_threads = n.to_i
      end

      opts.on("-c", "--cache_file [path]", "use cache_file as for the name cache. " +
              "file would have been previously generated by this program") do |c|
        @alp.cachepath = c
      end

      opts.on("-a", "--age [number]", "The maximum age in minutes that a cached name will be respected, defaults to 24 hours." ) do |a|
        @alp.max_cache_age = a.to_i * 60
      end

      opts.on("-t", "--timeout [decimal]", "Timeout of individual name requests.  A decimal number of seconds" ) do |t|
        @alp.my_timeout = t.to_f
      end

      opts.on("-o", "--outfile [path]", "File to write out data to.  STDOUT is used if left blank") do |o|
        @alp.outfile = o
      end

      opts.on("--", "--end",
              "Don't parse any more options") do
        OptionParser.terminate
      end
    end #end option parser block

    opts = begin option_parser.parse ARGV
           rescue OptionParser::InvalidOption => e
             puts e
             puts option_parser
             exit 1
           end

    @alp.logpath = opts.pop

    unless(@alp.logpath && opts.empty?)
      puts option_parser
      exit 1
    end
  end

  def run
    parse_options
    @alp.run
    @alp.write_out
  end
end

alpp = ApacheLogProcessorProgram.new
alpp.run

